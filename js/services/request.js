"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeRequest = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _constant = require("../constant");

var _models = require("../models");

var _ = require("./");

var _utils = require("../utils");

const getUrl = (target, extensionKeysExist, customExt, url) => {
  if (extensionKeysExist && !customExt || !extensionKeysExist && customExt) return url;
  return target;
};

const makeRequest = (target, customExt) => {
  if (!target) throw new Error(_constant.errors.request.missingTarget);
  const extensions = (0, _.getExtensions)();
  const extensionByTarget = customExt || (0, _utils.getExtensionById)(target, extensions);
  const extensionKeys = extensionByTarget && Object.keys(extensionByTarget);
  const requestCancelToken = _axios.default.CancelToken;
  const requestSource = requestCancelToken.source();
  const stop = requestSource.cancel;
  const {
    url,
    method,
    responseType,
    headers,
    ...rest
  } = extensionByTarget;
  (0, _.dispatchCallbacks)(_models.ExtensionCallbackType.before, extensionByTarget, {
    isPending: false,
    stop
  });

  const newRequest = async () => {
    (0, _.dispatchCallbacks)(_models.ExtensionCallbackType.start, extensionByTarget, {
      isPending: true,
      stop
    });

    try {
      return await (0, _axios.default)({ ...rest,
        cancelToken: requestSource.token,
        url: getUrl(target, extensionKeys.length > 0, customExt, url),
        method: method || 'GET',
        responseType: responseType || 'json',
        headers: { ...headers,
          'X-Requested-With': 'XMLHttpRequest'
        }
      });
    } catch (err) {
      (0, _.dispatchCallbacks)(_models.ExtensionCallbackType.error, extensionByTarget, err);
      throw new Error(_constant.errors.request.requestFailed);
    }
  };

  return new Promise(resolve => {
    newRequest().then(payload => {
      const {
        data
      } = payload;
      const payloadData = data || {};
      resolve(payloadData);
      (0, _.dispatchCallbacks)(_models.ExtensionCallbackType.success, extensionByTarget, payloadData);
      (0, _.redrawSnippets)(data.snippets || {});
      (0, _.dispatchCallbacks)(_models.ExtensionCallbackType.complete, extensionByTarget, payloadData);
    }).catch(() => {
      (0, _.dispatchCallbacks)(_models.ExtensionCallbackType.error, extensionByTarget, _constant.errors.request.requestFailed);
    });
  });
};

exports.makeRequest = makeRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlcy9yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbImdldFVybCIsInRhcmdldCIsImV4dGVuc2lvbktleXNFeGlzdCIsImN1c3RvbUV4dCIsInVybCIsIm1ha2VSZXF1ZXN0IiwiRXJyb3IiLCJlcnJvcnMiLCJyZXF1ZXN0IiwibWlzc2luZ1RhcmdldCIsImV4dGVuc2lvbnMiLCJleHRlbnNpb25CeVRhcmdldCIsImV4dGVuc2lvbktleXMiLCJPYmplY3QiLCJrZXlzIiwicmVxdWVzdENhbmNlbFRva2VuIiwiYXhpb3MiLCJDYW5jZWxUb2tlbiIsInJlcXVlc3RTb3VyY2UiLCJzb3VyY2UiLCJzdG9wIiwiY2FuY2VsIiwibWV0aG9kIiwicmVzcG9uc2VUeXBlIiwiaGVhZGVycyIsInJlc3QiLCJFeHRlbnNpb25DYWxsYmFja1R5cGUiLCJiZWZvcmUiLCJpc1BlbmRpbmciLCJuZXdSZXF1ZXN0Iiwic3RhcnQiLCJjYW5jZWxUb2tlbiIsInRva2VuIiwibGVuZ3RoIiwiZXJyIiwiZXJyb3IiLCJyZXF1ZXN0RmFpbGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwicGF5bG9hZCIsImRhdGEiLCJwYXlsb2FkRGF0YSIsInN1Y2Nlc3MiLCJzbmlwcGV0cyIsImNvbXBsZXRlIiwiY2F0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUdBOztBQUNBOztBQUVBLE1BQU1BLE1BQU0sR0FBRyxDQUFDQyxNQUFELEVBQWlCQyxrQkFBakIsRUFBOENDLFNBQTlDLEVBQXFFQyxHQUFyRSxLQUFzRjtBQUNwRyxNQUFLRixrQkFBa0IsSUFBSSxDQUFDQyxTQUF4QixJQUF1QyxDQUFDRCxrQkFBRCxJQUF1QkMsU0FBbEUsRUFBOEUsT0FBT0MsR0FBUDtBQUM5RSxTQUFPSCxNQUFQO0FBQ0EsQ0FIRDs7QUFLTyxNQUFNSSxXQUFXLEdBQUcsQ0FBQ0osTUFBRCxFQUFpQkUsU0FBakIsS0FBd0U7QUFDbEcsTUFBSSxDQUFDRixNQUFMLEVBQWEsTUFBTSxJQUFJSyxLQUFKLENBQVVDLGlCQUFPQyxPQUFQLENBQWVDLGFBQXpCLENBQU47QUFDYixRQUFNQyxVQUFVLEdBQUcsc0JBQW5CO0FBQ0EsUUFBTUMsaUJBQWlCLEdBQUdSLFNBQVMsSUFBSSw2QkFBaUJGLE1BQWpCLEVBQXlCUyxVQUF6QixDQUF2QztBQUNBLFFBQU1FLGFBQWEsR0FBR0QsaUJBQWlCLElBQUlFLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxpQkFBWixDQUEzQztBQUNBLFFBQU1JLGtCQUFrQixHQUFHQyxlQUFNQyxXQUFqQztBQUNBLFFBQU1DLGFBQWEsR0FBR0gsa0JBQWtCLENBQUNJLE1BQW5CLEVBQXRCO0FBQ0EsUUFBTUMsSUFBSSxHQUFHRixhQUFhLENBQUNHLE1BQTNCO0FBQ0EsUUFBTTtBQUFFakIsSUFBQUEsR0FBRjtBQUFPa0IsSUFBQUEsTUFBUDtBQUFlQyxJQUFBQSxZQUFmO0FBQTZCQyxJQUFBQSxPQUE3QjtBQUFzQyxPQUFHQztBQUF6QyxNQUFrRGQsaUJBQXhEO0FBRUEsMkJBQWtCZSw4QkFBc0JDLE1BQXhDLEVBQWdEaEIsaUJBQWhELEVBQW1FO0FBQUVpQixJQUFBQSxTQUFTLEVBQUUsS0FBYjtBQUFvQlIsSUFBQUE7QUFBcEIsR0FBbkU7O0FBQ0EsUUFBTVMsVUFBVSxHQUFHLFlBQXdEO0FBQzFFLDZCQUFrQkgsOEJBQXNCSSxLQUF4QyxFQUErQ25CLGlCQUEvQyxFQUFrRTtBQUFFaUIsTUFBQUEsU0FBUyxFQUFFLElBQWI7QUFBbUJSLE1BQUFBO0FBQW5CLEtBQWxFOztBQUNBLFFBQUk7QUFDSCxhQUFPLE1BQU0sb0JBQU0sRUFDbEIsR0FBR0ssSUFEZTtBQUVsQk0sUUFBQUEsV0FBVyxFQUFFYixhQUFhLENBQUNjLEtBRlQ7QUFHbEI1QixRQUFBQSxHQUFHLEVBQUVKLE1BQU0sQ0FBQ0MsTUFBRCxFQUFTVyxhQUFhLENBQUNxQixNQUFkLEdBQXVCLENBQWhDLEVBQW1DOUIsU0FBbkMsRUFBOENDLEdBQTlDLENBSE87QUFJbEJrQixRQUFBQSxNQUFNLEVBQUVBLE1BQU0sSUFBSSxLQUpBO0FBS2xCQyxRQUFBQSxZQUFZLEVBQUVBLFlBQVksSUFBSSxNQUxaO0FBTWxCQyxRQUFBQSxPQUFPLEVBQUUsRUFBRSxHQUFHQSxPQUFMO0FBQWMsOEJBQW9CO0FBQWxDO0FBTlMsT0FBTixDQUFiO0FBUUEsS0FURCxDQVNFLE9BQU9VLEdBQVAsRUFBWTtBQUNiLCtCQUFrQlIsOEJBQXNCUyxLQUF4QyxFQUErQ3hCLGlCQUEvQyxFQUFrRXVCLEdBQWxFO0FBQ0EsWUFBTSxJQUFJNUIsS0FBSixDQUFVQyxpQkFBT0MsT0FBUCxDQUFlNEIsYUFBekIsQ0FBTjtBQUNBO0FBQ0QsR0FmRDs7QUFpQkEsU0FBTyxJQUFJQyxPQUFKLENBQWdDQyxPQUFPLElBQUk7QUFDakRULElBQUFBLFVBQVUsR0FDUlUsSUFERixDQUNPQyxPQUFPLElBQUk7QUFDaEIsWUFBTTtBQUFFQyxRQUFBQTtBQUFGLFVBQVdELE9BQWpCO0FBQ0EsWUFBTUUsV0FBVyxHQUFHRCxJQUFJLElBQUksRUFBNUI7QUFDQUgsTUFBQUEsT0FBTyxDQUFDSSxXQUFELENBQVA7QUFDQSwrQkFBa0JoQiw4QkFBc0JpQixPQUF4QyxFQUFpRGhDLGlCQUFqRCxFQUFvRStCLFdBQXBFO0FBQ0EsNEJBQWVELElBQUksQ0FBQ0csUUFBTCxJQUFpQixFQUFoQztBQUNBLCtCQUFrQmxCLDhCQUFzQm1CLFFBQXhDLEVBQWtEbEMsaUJBQWxELEVBQXFFK0IsV0FBckU7QUFDQSxLQVJGLEVBU0VJLEtBVEYsQ0FTUSxNQUFNO0FBQ1osK0JBQWtCcEIsOEJBQXNCUyxLQUF4QyxFQUErQ3hCLGlCQUEvQyxFQUFrRUosaUJBQU9DLE9BQVAsQ0FBZTRCLGFBQWpGO0FBQ0EsS0FYRjtBQVlBLEdBYk0sQ0FBUDtBQWNBLENBMUNNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7IEF4aW9zUmVzcG9uc2UgfSBmcm9tICdheGlvcydcclxuXHJcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2NvbnN0YW50J1xyXG5pbXBvcnQgeyBFeHRlbnNpb25DYWxsYmFja1R5cGUgfSBmcm9tICdtb2RlbHMnXHJcbmltcG9ydCB7IFJlcXVlc3RQYXlsb2FkRGF0YSwgRXh0ZW5zaW9uIH0gZnJvbSAndHlwZXMnXHJcblxyXG5pbXBvcnQgeyBkaXNwYXRjaENhbGxiYWNrcywgcmVkcmF3U25pcHBldHMsIGdldEV4dGVuc2lvbnMgfSBmcm9tICdzZXJ2aWNlcydcclxuaW1wb3J0IHsgZ2V0RXh0ZW5zaW9uQnlJZCB9IGZyb20gJ3V0aWxzJ1xyXG5cclxuY29uc3QgZ2V0VXJsID0gKHRhcmdldDogc3RyaW5nLCBleHRlbnNpb25LZXlzRXhpc3Q6IGJvb2xlYW4sIGN1c3RvbUV4dD86IEV4dGVuc2lvbiwgdXJsPzogc3RyaW5nKSA9PiB7XHJcblx0aWYgKChleHRlbnNpb25LZXlzRXhpc3QgJiYgIWN1c3RvbUV4dCkgfHwgKCFleHRlbnNpb25LZXlzRXhpc3QgJiYgY3VzdG9tRXh0KSkgcmV0dXJuIHVybFxyXG5cdHJldHVybiB0YXJnZXRcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IG1ha2VSZXF1ZXN0ID0gKHRhcmdldDogc3RyaW5nLCBjdXN0b21FeHQ/OiBFeHRlbnNpb24pOiBQcm9taXNlPFJlcXVlc3RQYXlsb2FkRGF0YT4gPT4ge1xyXG5cdGlmICghdGFyZ2V0KSB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLnJlcXVlc3QubWlzc2luZ1RhcmdldClcclxuXHRjb25zdCBleHRlbnNpb25zID0gZ2V0RXh0ZW5zaW9ucygpXHJcblx0Y29uc3QgZXh0ZW5zaW9uQnlUYXJnZXQgPSBjdXN0b21FeHQgfHwgZ2V0RXh0ZW5zaW9uQnlJZCh0YXJnZXQsIGV4dGVuc2lvbnMpXHJcblx0Y29uc3QgZXh0ZW5zaW9uS2V5cyA9IGV4dGVuc2lvbkJ5VGFyZ2V0ICYmIE9iamVjdC5rZXlzKGV4dGVuc2lvbkJ5VGFyZ2V0KVxyXG5cdGNvbnN0IHJlcXVlc3RDYW5jZWxUb2tlbiA9IGF4aW9zLkNhbmNlbFRva2VuXHJcblx0Y29uc3QgcmVxdWVzdFNvdXJjZSA9IHJlcXVlc3RDYW5jZWxUb2tlbi5zb3VyY2UoKVxyXG5cdGNvbnN0IHN0b3AgPSByZXF1ZXN0U291cmNlLmNhbmNlbFxyXG5cdGNvbnN0IHsgdXJsLCBtZXRob2QsIHJlc3BvbnNlVHlwZSwgaGVhZGVycywgLi4ucmVzdCB9ID0gZXh0ZW5zaW9uQnlUYXJnZXRcclxuXHJcblx0ZGlzcGF0Y2hDYWxsYmFja3MoRXh0ZW5zaW9uQ2FsbGJhY2tUeXBlLmJlZm9yZSwgZXh0ZW5zaW9uQnlUYXJnZXQsIHsgaXNQZW5kaW5nOiBmYWxzZSwgc3RvcCB9KVxyXG5cdGNvbnN0IG5ld1JlcXVlc3QgPSBhc3luYyAoKTogUHJvbWlzZTxBeGlvc1Jlc3BvbnNlPFJlcXVlc3RQYXlsb2FkRGF0YT4+ID0+IHtcclxuXHRcdGRpc3BhdGNoQ2FsbGJhY2tzKEV4dGVuc2lvbkNhbGxiYWNrVHlwZS5zdGFydCwgZXh0ZW5zaW9uQnlUYXJnZXQsIHsgaXNQZW5kaW5nOiB0cnVlLCBzdG9wIH0pXHJcblx0XHR0cnkge1xyXG5cdFx0XHRyZXR1cm4gYXdhaXQgYXhpb3Moe1xyXG5cdFx0XHRcdC4uLnJlc3QsXHJcblx0XHRcdFx0Y2FuY2VsVG9rZW46IHJlcXVlc3RTb3VyY2UudG9rZW4sXHJcblx0XHRcdFx0dXJsOiBnZXRVcmwodGFyZ2V0LCBleHRlbnNpb25LZXlzLmxlbmd0aCA+IDAsIGN1c3RvbUV4dCwgdXJsKSxcclxuXHRcdFx0XHRtZXRob2Q6IG1ldGhvZCB8fCAnR0VUJyxcclxuXHRcdFx0XHRyZXNwb25zZVR5cGU6IHJlc3BvbnNlVHlwZSB8fCAnanNvbicsXHJcblx0XHRcdFx0aGVhZGVyczogeyAuLi5oZWFkZXJzLCAnWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCcgfSxcclxuXHRcdFx0fSlcclxuXHRcdH0gY2F0Y2ggKGVycikge1xyXG5cdFx0XHRkaXNwYXRjaENhbGxiYWNrcyhFeHRlbnNpb25DYWxsYmFja1R5cGUuZXJyb3IsIGV4dGVuc2lvbkJ5VGFyZ2V0LCBlcnIpXHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihlcnJvcnMucmVxdWVzdC5yZXF1ZXN0RmFpbGVkKVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG5ldyBQcm9taXNlPFJlcXVlc3RQYXlsb2FkRGF0YT4ocmVzb2x2ZSA9PiB7XHJcblx0XHRuZXdSZXF1ZXN0KClcclxuXHRcdFx0LnRoZW4ocGF5bG9hZCA9PiB7XHJcblx0XHRcdFx0Y29uc3QgeyBkYXRhIH0gPSBwYXlsb2FkXHJcblx0XHRcdFx0Y29uc3QgcGF5bG9hZERhdGEgPSBkYXRhIHx8IHt9XHJcblx0XHRcdFx0cmVzb2x2ZShwYXlsb2FkRGF0YSlcclxuXHRcdFx0XHRkaXNwYXRjaENhbGxiYWNrcyhFeHRlbnNpb25DYWxsYmFja1R5cGUuc3VjY2VzcywgZXh0ZW5zaW9uQnlUYXJnZXQsIHBheWxvYWREYXRhKVxyXG5cdFx0XHRcdHJlZHJhd1NuaXBwZXRzKGRhdGEuc25pcHBldHMgfHwge30pXHJcblx0XHRcdFx0ZGlzcGF0Y2hDYWxsYmFja3MoRXh0ZW5zaW9uQ2FsbGJhY2tUeXBlLmNvbXBsZXRlLCBleHRlbnNpb25CeVRhcmdldCwgcGF5bG9hZERhdGEpXHJcblx0XHRcdH0pXHJcblx0XHRcdC5jYXRjaCgoKSA9PiB7XHJcblx0XHRcdFx0ZGlzcGF0Y2hDYWxsYmFja3MoRXh0ZW5zaW9uQ2FsbGJhY2tUeXBlLmVycm9yLCBleHRlbnNpb25CeVRhcmdldCwgZXJyb3JzLnJlcXVlc3QucmVxdWVzdEZhaWxlZClcclxuXHRcdFx0fSlcclxuXHR9KVxyXG59XHJcbiJdfQ==